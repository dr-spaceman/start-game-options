{"version":3,"sources":["webpack:///./browser/src/components/ui/UnderlinedInput.jsx","webpack:///./browser/src/components/Login.jsx"],"names":["typography","fontFamily","UnderlinedInput","value","type","padding","autofocus","props","state","setState","React","useState","placeholderPad","length","placeholder","repeat","ref","input","focus","className","style","position","left","top","zIndex","opacity","onChange","event","target","console","log","initialState","isOpen","isLoading","isError","mode","current","user","error","reducer","action","inputName","inputValue","window","location","reload","message","Error","Login","LoginButton","form","useRef","dispatchState","useReducer","toggleOpen","preventDefault","resetForm","hasOwnProperty","username","LoginForm","name","RegisterForm","handleClick","Modal","open","close","id","onSubmit","async","response","fetch","method","credentials","ok","result","json","collection","items","payload","password","headers","body","JSON","stringify","errors","undefined","NavMenu","Item","selected","href","onClick","Button","variant"],"mappings":"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","file":"Login_bundle.js","sourcesContent":["import React from 'react';\n\nconst typography = {\n    fontFamily: 'Press Start',\n};\n\nexport default function UnderlinedInput({ value = '', type = 'text', padding = 10, autofocus, ...props }) {\n    const [state, setState] = React.useState(value);\n    const handleChange = (event) => {\n        setState(event.target.value);\n    };\n    const placeholderPad = padding - state.length;\n    const placeholder = '_'.repeat(placeholderPad > 0 ? placeholderPad : 0);\n\n    if (autofocus) {\n        props.ref = (input) => input && input.focus();\n    }\n\n    return (\n        <div className=\"underlinedinput\" style={{ position: 'relative' }}>\n            <div className=\"underline\" style={{ position: 'absolute', left: 0, top: '.3em', zIndex: 0, ...typography }}>\n                <span style={{ opacity: 0 }}>{state}</span>\n                <span>{placeholder}</span>\n            </div>\n            <input type={type} value={state} onChange={handleChange} style={{ position: 'relative', zIndex: 1, ...typography }} {...props} />\n        </div>\n    );\n}\n","/* eslint-disable no-prototype-builtins */\n\n/**\n * Login component with login form\n * Note: Component is lazy loaded upon clicking login button\n */\n\nimport React from 'react';\nimport Modal from './ui/Modal.jsx';\nimport UnderlinedInput from './ui/UnderlinedInput.jsx';\nimport NavMenu from './ui/NavMenu.jsx';\nimport Button from './ui/Button.jsx';\nimport { QuestionBlock, LoadingMascot } from '../lib/icons.js';\n\nconsole.log('<Login> has been lazy loaded!');\n\nconst API_ENDPOINT = `${process.env.API_ENDPOINT}/login`;\n\nconst initialState = {\n    isOpen: true,\n    isLoading: false,\n    isError: false,\n    mode: 'login', // login; register\n    current: 'username', // Form field to fill... username, password, email\n    user: {}, // user credentials: username, email, password\n    error: {},\n};\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'RESET':\n            return { ...initialState };\n        case 'TOGGLE':\n            return {\n                ...initialState,\n                isOpen: !state.isOpen,\n            };\n        case 'INIT':\n            return {\n                ...state,\n                isLoading: true,\n                isError: false,\n            };\n        case 'SUBMIT':\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                current: action.current,\n                user: {\n                    ...state.user,\n                    [action.inputName]: action.inputValue,\n                },\n            };\n        case 'REGISTER':\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                mode: 'register',\n            };\n        case 'LOGIN_SUCCESS':\n            window.location.reload();\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n            };\n        case 'LOGIN_ERROR':\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                error: action.error ? action.error : { message: 'An error occurred.' },\n            };\n        default:\n            throw new Error();\n    }\n};\n\nexport default function Login({ LoginButton }) {\n    const form = React.useRef();\n\n    const [state, dispatchState] = React.useReducer(reducer, initialState);\n\n    const toggleOpen = (event) => {\n        event.preventDefault();\n        dispatchState({ type: 'TOGGLE' });\n    };\n\n    const resetForm = () => {\n        dispatchState({ type: 'RESET' });\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        dispatchState({ type: 'INIT' });\n\n        const input = form['current'][state.current]['value'];\n\n        if (state.current === 'username') {\n            const response = await fetch(`${API_ENDPOINT}/${input}`, {\n                method: 'GET',\n                mode: 'same-origin',\n                credentials: 'same-origin',\n            });\n            if (response.ok) {\n                const result = await response.json();\n                dispatchState({\n                    type: 'SUBMIT',\n                    inputName: 'username',\n                    inputValue: result.collection.items[0].username,\n                    current: 'password',\n                });\n            } else {\n                dispatchState({ type: 'REGISTER' });\n            }\n        } else if (state.current === 'password') {\n            const payload = {\n                ...state.user,\n                password: input,\n            };\n\n            const response = await fetch(API_ENDPOINT, {\n                method: 'POST',\n                mode: 'same-origin',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(payload),\n            });\n            if (response.ok) {\n                dispatchState({ type: 'LOGIN_SUCCESS' });\n            } else {\n                const result = await response.json();\n                console.log(response, result);\n                dispatchState({ type: 'LOGIN_ERROR', error: result.collection.errors[0] });\n            }\n        } else {\n            dispatchState({ type: 'LOGIN_ERROR', error: 'An unknown error occurred.' });\n        }\n    };\n\n    let message;\n    if (state.isError) {\n        message = <div className=\"error\">{state.error.hasOwnProperty('message') ? state.error.message : 'An error occurred'}</div>;\n    } else if (state.mode === 'login') {\n        if (state.current === 'username') message = \"Erm... What's your name again?\";\n        else if (state.current === 'password') message = `That's right! I remember now! Your name is ${state.user.username}!`;\n    } else if (state.mode === 'register') {\n        message = 'We don\\'t have anyone registered by that name. Would you like to register?';\n    }\n\n    const LoginForm = () => {\n        if (state.current === 'username') {\n            return <UnderlinedInput name=\"username\" placeholder=\"Username or Email\" padding={19} autofocus />;\n        }\n\n        return <UnderlinedInput type=\"password\" name=\"password\" placeholder=\"Password\" padding={19} autofocus />;\n    };\n\n    const RegisterForm = () => 'Register form here....';\n\n    return (\n        <>\n            <LoginButton handleClick={toggleOpen} />\n            <Modal open={state.isOpen} close={toggleOpen}>\n                <form id=\"loginform\" ref={form} onSubmit={handleSubmit} className={state.isLoading ? 'loading' : undefined}>\n                    <div id=\"loginform-nav\">\n                        <NavMenu>\n                            <NavMenu.Item selected><a href=\"#login\" onClick={resetForm}>New Name</a></NavMenu.Item>\n                            <NavMenu.Item><a href=\"#blue\" onClick={resetForm}>Blue</a></NavMenu.Item>\n                            <NavMenu.Item><a href=\"#gary\" onClick={resetForm}>Gary</a></NavMenu.Item>\n                            <NavMenu.Item><a href=\"#john\" onClick={resetForm}>John</a></NavMenu.Item>\n                        </NavMenu>\n                    </div>\n                    <div id=\"loginform-rival\" />\n                    <div id=\"loginform-message\">\n                        {message}\n                    </div>\n                    <div id=\"loginform-input\">\n                        {state.mode === 'login' ? <LoginForm /> : <RegisterForm />}\n                    </div>\n                    <div id=\"loginform-submit\">\n                        {state.isLoading ? (\n                            <>\n                                <span>Oak is thinking</span>\n                            </>\n                        ) : (\n                            <>\n                                {state.mode === 'login'\n                                    ? <Button onClick={() => dispatchState({ type: 'REGISTER' })}>Register</Button>\n                                    : <Button onClick={resetForm}>Login</Button>}\n                                <Button variant=\"contained\" type=\"submit\">Submit</Button>\n                            </>\n                        )}\n                    </div>\n                </form>\n            </Modal>\n        </>\n    );\n}\n"],"sourceRoot":""}