{"version":3,"sources":["webpack:///./browser/src/components/Dropdown.jsx","webpack:///./browser/src/hooks/use-outside-click.js","webpack:///./browser/src/components/User.jsx","webpack:///./browser/src/components/TopNavUser.jsx"],"names":["isDropdownToggle","matchComponent","DropdownToggle","DropdownMenu","Dropdown","className","children","props","open","setOpen","React","useState","handleToggle","ref","callback","useRef","handleClickOutside","event","current","contains","target","console","log","useEffect","document","addEventListener","removeEventListener","useOutsideClick","classNames","cn","dropdown","Children","map","child","isValidElement","cloneElement","handleClick","type","onClick","aria-haspopup","aria-expanded","role","Toggle","Menu","Item","User","tag","username","avatar","href","undefined","tagChild","createElement","TopNavUser","id"],"mappings":"mYAKA,MAAMA,EAAmBC,YAAeC,GACjBD,YAAeE,GAEtC,SAASC,GAAS,UAAEC,EAAF,SAAaC,KAAaC,IACxC,MAAOC,EAAMC,GAAWC,IAAMC,UAAS,GACjCC,EAAe,IAAMH,GAASD,GAG9BK,ECJK,SAAyBC,GACpC,MAAMD,EAAMH,IAAMK,SAElB,SAASC,EAAmBC,GAAO,SAE3B,UAACJ,EAAIK,eAAL,iBAAC,EAAaC,gBAAd,aAAC,SAAwBF,EAAMG,WAC/BC,QAAQC,IAAI,yBAA0BR,GACtCA,EAASG,IAejB,OAXAP,IAAMa,UAAU,KAEZC,SAASC,iBAAiB,QAAST,GACnCK,QAAQC,IAAI,kCACL,WAEHE,SAASE,oBAAoB,QAASV,GACtCK,QAAQC,IAAI,kCAEjB,CAACT,IAEGA,EDlBKc,CAFQ,IAAMlB,GAAQ,IAI5BmB,EAAaC,IAAG,CAClBxB,YACAyB,UAAU,EACVtB,SAGJ,OACI,2BAAKK,IAAKA,EAAKR,UAAWuB,GAAgBrB,GAErCG,IAAMqB,SAASC,IAAI1B,EAAW2B,GACtBvB,IAAMwB,eAAeD,IAKtBjC,EAAiBiC,GACVvB,IAAMyB,aAAaF,EAAO,CAC7BG,YAAaxB,IANVqB,IAgB3B,SAAS/B,GAAe,UAAEG,EAAF,SAAaC,EAAb,YAAuB8B,IAC3C,OACI,4BAAQ/B,UAAY,mBAAkBA,EAAagC,KAAK,SAASC,QAASF,EAAaG,gBAAc,OAAOC,gBAAc,QACrHlC,GAKb,SAASH,GAAa,UAAEE,EAAF,SAAaC,IAC/B,OACI,yBAAKD,UAAY,uBAAsBA,EAAaoC,KAAK,QACpDnC,GAWbF,EAASsC,OAASxC,EAClBE,EAASuC,KAAOxC,EAChBC,EAASwC,KART,UAAsB,SAAEtC,IACpB,OACI,yBAAKD,UAAU,gBAAgBoC,KAAK,YAAYnC,IAQzCF,QElEA,SAASyC,EAAKtC,GACzB,IAMIuC,GANA,SAAEC,EAAF,OAAYC,EAAZ,KAAoBC,GAAS1C,OAEpB2C,IAATD,IACAA,EAAQ,IAAGF,GAIf,MAAMI,EAAW,0BAAM9C,UAAU,iBAAiB0C,GAOlD,OALID,EADAG,EACMvC,IAAM0C,cAAc,IAAK,CAAEH,OAAM5C,UAAW,aAAe8C,GAE3DzC,IAAM0C,cAAc,OAAQ,CAAE/C,UAAW,aAAe8C,GAI9D,0BAAM9C,UAAU,QACXyC,GCbE,SAASO,GAAW,SAAEN,IACjC,OACI,kBAAC,EAAD,CAAUO,GAAG,uBACT,kBAAC,EAASZ,OAAV,CAAiBrC,UAAU,iBACvB,kBAACwC,EAAD,CAAME,SAAUA,EAAUE,KAAK,GAAGD,OAAO,MAE7C,kBAAC,EAASL,KAAV,KACI,kBAAC,EAASC,KAAV,YACA,kBAAC,EAASA,KAAV,KAAe,uBAAGK,KAAO,KAAIF,GAAd,YACf,kBAAC,EAASH,KAAV,KAAe,uBAAGK,KAAO,KAAIF,WAAd,UACf,kBAAC,EAASH,KAAV,KAAe,uBAAGK,KAAK,wBAAR,cAZ/B5B,QAAQC,IAAI","file":"TopNavUser_bundle.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport matchComponent from '../lib/match-component.js';\nimport useOutsideClick from '../hooks/use-outside-click.js';\n\nconst isDropdownToggle = matchComponent(DropdownToggle);\nconst isDropdownMenu = matchComponent(DropdownMenu);\n\nfunction Dropdown({ className, children, ...props }) {\n    const [open, setOpen] = React.useState(false);\n    const handleToggle = () => setOpen(!open);\n    const handleClose = () => setOpen(false);\n\n    const ref = useOutsideClick(handleClose);\n\n    const classNames = cn({\n        className,\n        dropdown: true,\n        open,\n    });\n\n    return (\n        <div ref={ref} className={classNames} {...props}>\n            {/* Map children & inject listeners */}\n            {React.Children.map(children, (child) => {\n                if (!React.isValidElement(child)) {\n                    return child;\n                }\n\n                // Button toggle dropdown menu\n                if (isDropdownToggle(child)) {\n                    return React.cloneElement(child, {\n                        handleClick: handleToggle,\n                    });\n                }\n\n                return child;\n            })}\n        </div>\n    );\n}\n\nfunction DropdownToggle({ className, children, handleClick }) {\n    return (\n        <button className={`dropdown-toggle ${className}`} type=\"button\" onClick={handleClick} aria-haspopup=\"true\" aria-expanded=\"true\">\n            {children}\n        </button>\n    );\n}\n\nfunction DropdownMenu({ className, children }) {\n    return (\n        <div className={`dropdown-menu light ${className}`} role=\"menu\">\n            {children}\n        </div>\n    );\n}\n\nfunction DropdownItem({ children }) {\n    return (\n        <div className=\"dropdown-item\" role=\"menuitem\">{children}</div>\n    );\n}\n\nDropdown.Toggle = DropdownToggle;\nDropdown.Menu = DropdownMenu;\nDropdown.Item = DropdownItem;\n\nexport default Dropdown;\n","import React from 'react';\n\n/**\n * Hook that listens for clicks outside of a reference.\n *\n * @param {Function} callback Function to execute on successful outside click\n *\n * @returns {Reference} Reference to \"inside\" element\n */\nexport default function useOutsideClick(callback) {\n    const ref = React.useRef();\n\n    function handleClickOutside(event) {\n        // If the click is registered outside the given ref, trigger cb\n        if (!ref.current?.contains?.(event.target)) {\n            console.log('Outside click detected', callback);\n            callback(event);\n        }\n    }\n\n    React.useEffect(() => {\n        // Bind the event listener\n        document.addEventListener('click', handleClickOutside);\n        console.log('Listening for outside click...');\n        return function cleanup() {\n            // Clean up before calling the effect again on the next render\n            document.removeEventListener('click', handleClickOutside);\n            console.log('Remove outside click handler');\n        };\n    }, [ref]);\n\n    return ref;\n}\n\nfunction useOutsideClick_OLD(ref, callback = () => {}) {\n    function handleClickOutside(event) {\n        // If the click is registered outside the given ref, trigger cb\n        if (!ref.current?.contains?.(event.target)) {\n            console.log('Outside click detected', callback);\n            callback(event);\n        }\n    }\n\n    React.useEffect(() => {\n        // Bind the event listener\n        document.addEventListener('click', handleClickOutside);\n        console.log('Listening for outside click...');\n        return () => {\n            // Clean up before calling the effect again on the next render\n            document.removeEventListener('click', handleClickOutside);\n            console.log('Remove outside click handler');\n        };\n    }, [callback]);\n}\n","import React from 'react';\n\nexport default function User(props) {\n    let { username, avatar, href } = props;\n\n    if (href === undefined) {\n        href = `~${username}`;\n    }\n\n    let tag;\n    const tagChild = <span className=\"user-username\">{username}</span>;\n    if (href) {\n        tag = React.createElement('a', { href, className: 'user-link' }, tagChild);\n    } else {\n        tag = React.createElement('span', { className: 'user-link' }, tagChild);\n    }\n\n    return (\n        <span className=\"user\">\n            {tag}\n        </span>\n    );\n}\n","import React from 'react';\nimport Dropdown from './Dropdown.jsx';\nimport User from './User.jsx';\n\nconsole.log('<TopNavUser> has been lazy loaded!');\n\nexport default function TopNavUser({ username }) {\n    return (\n        <Dropdown id=\"login-user-dropdown\">\n            <Dropdown.Toggle className=\"access-button\">\n                <User username={username} href=\"\" avatar=\"\" />\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n                <Dropdown.Item>foo</Dropdown.Item>\n                <Dropdown.Item><a href={`/~${username}`}>Profile</a></Dropdown.Item>\n                <Dropdown.Item><a href={`/~${username}/games`}>Games</a></Dropdown.Item>\n                <Dropdown.Item><a href=\"/login.php?do=logout\">Log out</a></Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n"],"sourceRoot":""}