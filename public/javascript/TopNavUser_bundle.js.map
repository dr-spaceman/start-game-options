{"version":3,"sources":["webpack:///./browser/src/lib/match-component.js","webpack:///./browser/src/lib/use-outside-click.js","webpack:///./browser/src/components/Dropdown.jsx","webpack:///./browser/src/components/User.jsx","webpack:///./browser/src/components/TopNavUser.jsx"],"names":["matchComponent","Component","c","type","props","componentType","useOutsideClick","ref","callback","React","useEffect","handleClickOutside","event","current","contains","target","console","log","document","addEventListener","removeEventListener","isDropdownToggle","DropdownToggle","DropdownMenu","Dropdown","className","children","rest","open","setOpen","useState","handleToggle","classnames","classNames","dropdown","wrapperRef","useRef","Children","map","child","isValidElement","cloneElement","handleClick","onClick","aria-haspopup","aria-expanded","role","Toggle","Menu","Item","User","tag","username","avatar","href","undefined","tagChild","createElement","TopNavUser","id"],"mappings":"4KAceA,MAdSC,GAAeC,GAE/BA,EAAEC,OAASF,MAKXC,EAAEE,OAASF,EAAEE,MAAMC,gBAAkBJ,GCF9B,SAASK,EAAgBC,EAAKC,GACzCC,IAAMC,UAAU,KAIZ,SAASC,EAAmBC,GACpBL,EAAIM,UAAYN,EAAIM,QAAQC,SAASF,EAAMG,UAC3CC,QAAQC,IAAI,yBAA0BT,GACtCA,KAMR,OADAU,SAASC,iBAAiB,YAAaR,GAChC,KAEHO,SAASE,oBAAoB,YAAaT,KAE/C,CAACJ,I,+MClBR,MAAMc,EAAmBrB,EAAesB,GACjBtB,EAAeuB,GAEtC,SAASC,EAASpB,GACd,MAAM,UAAEqB,EAAF,SAAaC,KAAaC,GAASvB,GAElCwB,EAAMC,GAAWpB,IAAMqB,UAAS,GACjCC,EAAe,IAAMF,GAASD,GAG9BI,EAAaC,IAAW,CAC1BR,YACAS,UAAU,EACVN,SAIEO,EAAa1B,IAAM2B,OAAO,MAGhC,OAFA9B,EAAgB6B,EAVI,IAAMN,GAAQ,IAa9B,2BAAKtB,IAAK4B,EAAYV,UAAWO,GAAgBL,GAE5ClB,IAAM4B,SAASC,IAAIZ,EAAWa,GACtB9B,IAAM+B,eAAeD,IAKtBlB,EAAiBkB,GACV9B,IAAMgC,aAAaF,EAAO,CAC7BG,YAAaX,IANVQ,IAgB3B,SAASjB,GAAe,UAAEG,EAAF,SAAaC,EAAb,YAAuBgB,IAC3C,OACI,4BAAQjB,UAAY,mBAAkBA,EAAatB,KAAK,SAASwC,QAASD,EAAaE,gBAAc,OAAOC,gBAAc,QACrHnB,GAKb,SAASH,GAAa,UAAEE,EAAF,SAAaC,IAC/B,OACI,yBAAKD,UAAY,uBAAsBA,EAAaqB,KAAK,QACpDpB,GAWbF,EAASuB,OAASzB,EAClBE,EAASwB,KAAOzB,EAChBC,EAASyB,KART,UAAsB,SAAEvB,IACpB,OACI,yBAAKD,UAAU,gBAAgBqB,KAAK,YAAYpB,IAQzCF,QCtEA,SAAS0B,EAAK9C,GACzB,IAMI+C,GANA,SAAEC,EAAF,OAAYC,EAAZ,KAAoBC,GAASlD,OAEpBmD,IAATD,IACAA,EAAQ,IAAGF,GAIf,MAAMI,EAAW,0BAAM/B,UAAU,iBAAiB2B,GAOlD,OALID,EADAG,EACM7C,IAAMgD,cAAc,IAAK,CAAEH,OAAM7B,UAAW,aAAe+B,GAE3D/C,IAAMgD,cAAc,OAAQ,CAAEhC,UAAW,aAAe+B,GAI9D,0BAAM/B,UAAU,QACX0B,GCbE,SAASO,GAAW,SAAEN,IACjC,OACI,kBAAC,EAAD,CAAUO,GAAG,uBACT,kBAAC,EAASZ,OAAV,CAAiBtB,UAAU,iBACvB,kBAACyB,EAAD,CAAME,SAAUA,EAAUE,KAAK,GAAGD,OAAO,MAE7C,kBAAC,EAASL,KAAV,KACI,kBAAC,EAASC,KAAV,YACA,kBAAC,EAASA,KAAV,KAAe,uBAAGK,KAAO,KAAIF,GAAd,YACf,kBAAC,EAASH,KAAV,KAAe,uBAAGK,KAAO,KAAIF,WAAd,UACf,kBAAC,EAASH,KAAV,KAAe,uBAAGK,KAAK,wBAAR,cAZ/BtC,QAAQC,IAAI","file":"TopNavUser_bundle.js","sourcesContent":["const matchComponent = (Component) => (c) => {\r\n    // React Component\r\n    if (c.type === Component) {\r\n        return true;\r\n    }\r\n\r\n    // Matching componentType\r\n    if (c.props && c.props.componentType === Component) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexport default matchComponent;","import React from 'react';\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\nexport default function useOutsideClick(ref, callback) {\n    React.useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                console.log('outside click detected', callback);\n                callback();\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            // Clean up before calling the effect again on the next render\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [ref]);\n}\n\n/**\n * Example use:\n * Component that alerts if you click outside of it\n */\nfunction MyComponent(props) {\n    const wrapperRef = useRef(null);\n    useOutsideClick(wrapperRef);\n\n    return <div ref={wrapperRef}>{props.children}</div>;\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport matchComponent from '../lib/match-component.js';\nimport useOutsideClick from '../lib/use-outside-click.js';\n\nconst isDropdownToggle = matchComponent(DropdownToggle);\nconst isDropdownMenu = matchComponent(DropdownMenu);\n\nfunction Dropdown(props) {\n    const { className, children, ...rest } = props;\n\n    const [open, setOpen] = React.useState(false);\n    const handleToggle = () => setOpen(!open);\n    const handleClose = () => setOpen(false);\n\n    const classnames = classNames({\n        className,\n        dropdown: true,\n        open,\n    });\n\n    // Event listener is always active... problem?\n    const wrapperRef = React.useRef(null);\n    useOutsideClick(wrapperRef, handleClose);\n\n    return (\n        <div ref={wrapperRef} className={classnames} {...rest}>\n            {/* Map children & inject listeners */}\n            {React.Children.map(children, (child) => {\n                if (!React.isValidElement(child)) {\n                    return child;\n                }\n\n                // Button toggle dropdown menu\n                if (isDropdownToggle(child)) {\n                    return React.cloneElement(child, {\n                        handleClick: handleToggle,\n                    });\n                }\n\n                return child;\n            })}\n        </div>\n    );\n}\n\nfunction DropdownToggle({ className, children, handleClick }) {\n    return (\n        <button className={`dropdown-toggle ${className}`} type=\"button\" onClick={handleClick} aria-haspopup=\"true\" aria-expanded=\"true\">\n            {children}\n        </button>\n    );\n}\n\nfunction DropdownMenu({ className, children }) {\n    return (\n        <div className={`dropdown-menu light ${className}`} role=\"menu\">\n            {children}\n        </div>\n    );\n}\n\nfunction DropdownItem({ children }) {\n    return (\n        <div className=\"dropdown-item\" role=\"menuitem\">{children}</div>\n    );\n}\n\nDropdown.Toggle = DropdownToggle;\nDropdown.Menu = DropdownMenu;\nDropdown.Item = DropdownItem;\n\nexport default Dropdown;\n","import React from 'react';\n\nexport default function User(props) {\n    let { username, avatar, href } = props;\n\n    if (href === undefined) {\n        href = `~${username}`;\n    }\n\n    let tag;\n    const tagChild = <span className=\"user-username\">{username}</span>;\n    if (href) {\n        tag = React.createElement('a', { href, className: 'user-link' }, tagChild);\n    } else {\n        tag = React.createElement('span', { className: 'user-link' }, tagChild);\n    }\n\n    return (\n        <span className=\"user\">\n            {tag}\n        </span>\n    );\n}\n","import React from 'react';\nimport Dropdown from './Dropdown.jsx';\nimport User from './User.jsx';\n\nconsole.log('<TopNavUser> has been lazy loaded!');\n\nexport default function TopNavUser({ username }) {\n    return (\n        <Dropdown id=\"login-user-dropdown\">\n            <Dropdown.Toggle className=\"access-button\">\n                <User username={username} href=\"\" avatar=\"\" />\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n                <Dropdown.Item>foo</Dropdown.Item>\n                <Dropdown.Item><a href={`/~${username}`}>Profile</a></Dropdown.Item>\n                <Dropdown.Item><a href={`/~${username}/games`}>Games</a></Dropdown.Item>\n                <Dropdown.Item><a href=\"/login.php?do=logout\">Log out</a></Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n"],"sourceRoot":""}