openapi: 3.0.0
info:
  title: 'Vigeogamesite API'
  version: 0.3.3
servers:
  -
    url: 'http://vgsite/api'
paths:
  '/albums/{id}':
    get:
      description: 'An album'
      operationId: 'Albums:GetOne'
      parameters:
        -
          $ref: '#/components/parameters/id'
        -
          $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
        '404':
          description: 'Requested album not found'
  /albums:
    get:
      description: 'A list of albums'
      operationId: 'Albums:GetAll'
      parameters:
        -
          $ref: '#/components/parameters/page'
        -
          $ref: '#/components/parameters/per_page'
        -
          $ref: '#/components/parameters/sort'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/q'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
  '/badges/{id}':
    get:
      description: 'A badge'
      operationId: 'Badges:GetOne'
      parameters:
        -
          $ref: '#/components/parameters/id'
        -
          $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badge'
        '404':
          description: 'Requested badge not found'
  /badges:
    get:
      description: 'A list of badges'
      operationId: 'Badges:GetAll'
      parameters:
        -
          $ref: '#/components/parameters/sort'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/q'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badge'
  '/games/{id}':
    get:
      description: 'A game'
      operationId: 'Games:GetOne'
      parameters:
        -
          $ref: '#/components/parameters/id'
        -
          $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/game'
        '404':
          description: 'Requested game not found'
  /games:
    get:
      description: 'A list of games'
      operationId: 'Games:GetAll'
      parameters:
        -
          $ref: '#/components/parameters/page'
        -
          $ref: '#/components/parameters/per_page'
        -
          $ref: '#/components/parameters/sort'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/q'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/game'
  /search:
    get:
      description: 'Search all the things'
      operationId: Search
      parameters:
        -
          required: true
          $ref: '#/components/parameters/q'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Things matching request query {q}'
          content:
            application/json:
              schema:
                properties:
                  title: { type: string }
                  title_sort: { type: string }
                  type: { type: string }
                  category: { type: string }
                  links: { type: array, items: { type: string } }
                  href: { type: string }
                type: object
  '/users/{id}':
    get:
      description: 'A user'
      operationId: 'Users:GetOne'
      parameters:
        -
          $ref: '#/components/parameters/id'
        -
          $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: 'Requested user not found'
    patch:
      description: 'Modify a user'
      operationId: 'Users:Patch'
      parameters:
        -
          $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: 'User modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Requested user not found'
        '409':
          description: 'Conflict: Parameter not valid'
  /users:
    get:
      description: 'A list of users'
      operationId: 'Users:GetAll'
      parameters:
        -
          $ref: '#/components/parameters/page'
        -
          $ref: '#/components/parameters/per_page'
        -
          $ref: '#/components/parameters/sort'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/q'
      responses:
        '200':
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
  /users/:
    post:
      description: 'Create a user'
      operationId: 'Users:Create'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: 'User modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: 'Conflict: Parameter not valid'
components:
  schemas:
    album:
      properties:
        id:
          type: string
        title:
          type: string
        subtitle:
          type: string
        keywords:
          type: boolean
        publisher:
          type: string
        cid:
          type: string
        albumid:
          type: string
        release:
          type: string
        price:
          type: string
        href:
          type: string
      type: object
    badge:
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        value:
          type: boolean
        value_description:
          type: string
        sort:
          type: string
      type: object
    game:
      properties:
        id:
          type: integer
        title:
          type: string
        title_sort:
          description: 'A modified title better used for natural sorting'
          type: string
        keywords:
          type: string
        description:
          type: string
        created:
          description: 'When the database entry was created'
          type: string
          format: datetime
        modified:
          description: 'When the database entry was modified'
          type: string
          format: datetime
        contributors:
          description: 'List of user IDs of users who helped build the data entry'
          type: array
          items:
            type: integer
        genres:
          type: array
          items:
            type: string
        developers:
          type: array
          items:
            type: string
        series:
          type: array
          items:
            type: string
        platforms:
          type: array
          items:
            type: string
        platform:
          description: 'Main platform'
          type: string
        release:
          description: 'Main platform release date'
          type: string
          format: date
        first_release:
          description: 'Earliest release for any platform or region'
          type: string
          format: date
        href:
          type: string
      type: object
    user:
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          description: 'A hashed string; Only given if explicitly requested using the `fields` parameter.'
          type: string
        email:
          type: string
        verified:
          type: boolean
        gender:
          description: 'enum(''he'', ''she'', ''them'')'
          type: string
        region:
          description: 'enum(''us'', ''jp'', ''eu'', ''au'')'
          type: string
        rank:
          type: integer
        avatar:
          type: string
        timezone:
          type: string
        data_created:
          type: date-time
        data_modified:
          type: date-time
        activity:
          type: date-time
        previous_activity:
          type: date-time
        href:
          type: string
      type: object
  parameters:
    q:
      name: q
      in: query
      description: 'Search term'
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: 'Custom sorted results. Format: `?sort=fieldname[:asc|desc]`'
      schema:
        type: string
      example: 'release:desc'
    fields:
      name: fields
      in: query
      description: 'A list of comma-separated fields to include in the response object.'
      schema:
        type: string
      example: 'title,release_date,tags'
    page:
      name: page
      in: query
      description: 'Page number'
      schema:
        type: integer
    per_page:
      name: per_page
      in: query
      description: 'Number of results per page'
      schema:
        type: integer
    id:
      name: id
      in: path
      description: 'The numeric ID for the requested item'
      required: true
      schema:
        type: integer
