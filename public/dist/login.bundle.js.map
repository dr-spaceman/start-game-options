{"version":3,"sources":["webpack:///./browser/src/components/ui/UnderlinedInput.jsx","webpack:///./browser/src/components/layout/Login.jsx"],"names":["UnderlinedInput","value","initialValue","type","padding","autofocus","placeholder","placeholderValue","props","setValue","React","useState","placeholderPad","length","repeat","viewValue","ref","input","focus","className","onChange","event","target","style","opacity","console","log","initialState","isOpen","isLoading","isError","mode","current","user","error","reducer","state","action","inputName","inputValue","window","location","reload","message","Error","Login","LoginButton","form","useRef","dispatchState","useReducer","toggleOpen","preventDefault","resetForm","hasOwnProperty","username","LoginForm","name","RegisterForm","email","handleClick","Modal","open","close","id","onSubmit","async","includes","response","fetch","method","credentials","ok","result","json","collection","items","payload","password","headers","body","JSON","stringify","errors","undefined","NavMenu","Item","selected","href","onClick","Button","variant"],"mappings":"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","file":"login.bundle.js","sourcesContent":["import React from 'react';\nimport cs from 'classnames';\nimport './UnderlinedInput.css';\n\nexport default function UnderlinedInput({\n    value: initialValue = '',\n    type = 'text',\n    padding = 10,\n    autofocus,\n    placeholder: placeholderValue,\n    ...props\n}) {\n    const [value, setValue] = React.useState(initialValue);\n    const handleChange = (event) => {\n        setValue(event.target.value);\n    };\n    const placeholderPad = padding - value.length;\n    const placeholder = '_'.repeat(placeholderPad > 0 ? placeholderPad : 0);\n    const viewValue = type === 'password' ? '*'.repeat(value.length) : value;\n\n    if (autofocus) {\n        props.ref = (input) => input && input.focus();\n    }\n\n    return (\n        <div className=\"underlinedinput root\">\n            <input type={type} value={value} onChange={handleChange} className=\"underlinedinput-typography\" {...props} />\n            <div className=\"underlinedinput-view\">\n                {value ? (\n                    <>\n                        <span className=\"underlinedinput-value\">{viewValue}</span>\n                        <span className=\"underlinedinput-carat\">&nbsp;</span>\n                    </>\n                ) : (\n                    <>\n                        <span className=\"underlinedinput-carat\">&nbsp;</span>\n                        <span className=\"underlinedinput-placeholder\">{placeholderValue}</span>\n                    </>\n                )}\n            </div>\n            <div className=\"underlinedinput-underline\">\n                <span style={{ opacity: 0 }}>{viewValue}</span>\n                <span>{placeholder}</span>\n            </div>\n        </div>\n    );\n}\n","/* eslint-disable no-prototype-builtins */\n\n/**\n * Login component with login form\n * Note: Component is lazy loaded upon clicking login button\n */\n\nimport React from 'react';\nimport Modal from '../ui/Modal.jsx';\nimport UnderlinedInput from '../ui/UnderlinedInput.jsx';\nimport NavMenu from '../ui/NavMenu.jsx';\nimport Button from '../ui/Button.jsx';\n\nconsole.log('<Login> has been lazy loaded!');\n\nconst API_ENDPOINT = `${process.env.API_ENDPOINT}/login`;\n\nconst initialState = {\n    isOpen: true,\n    isLoading: false,\n    isError: false,\n    mode: 'login', // login; register\n    current: 'username', // Form field to fill... username, password, email\n    user: {}, // user credentials: username, email, password\n    error: {},\n};\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'RESET':\n            return { ...initialState };\n        case 'TOGGLE':\n            return {\n                ...initialState,\n                isOpen: !state.isOpen,\n            };\n        // Form submit\n        case 'SUBMIT':\n            return {\n                ...state,\n                isLoading: true,\n                isError: false,\n                user: {\n                    ...state.user,\n                    [action.inputName]: action.inputValue,\n                },\n            };\n        // Submit result success\n        case 'NEXT':\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                current: action.current,\n                user: {\n                    ...state.user,\n                    [action.inputName]: action.inputValue,\n                },\n            };\n        case 'REGISTER':\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                mode: 'register',\n            };\n        case 'LOGIN_SUCCESS':\n            window.location.reload();\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n            };\n        case 'ERROR':\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                error: action.error ? action.error : { message: 'An error occurred.' },\n            };\n        default:\n            throw new Error();\n    }\n};\n\nexport default function Login({ LoginButton }) {\n    const form = React.useRef();\n\n    const [state, dispatchState] = React.useReducer(reducer, initialState);\n\n    const toggleOpen = (event) => {\n        event.preventDefault();\n        dispatchState({ type: 'TOGGLE' });\n    };\n\n    const resetForm = () => {\n        dispatchState({ type: 'RESET' });\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        const input = form['current'][state.current]['value'];\n\n        dispatchState({\n            type: 'SUBMIT',\n            inputName: state.current === 'username' && input.includes('@') ? 'email' : state.current,\n            inputValue: input,\n            current: 'password',\n        });\n\n        if (state.current === 'username') {\n            const response = await fetch(`${API_ENDPOINT}/${input}`, {\n                method: 'GET',\n                mode: 'same-origin',\n                credentials: 'same-origin',\n            });\n            if (response.ok) {\n                const result = await response.json();\n                dispatchState({\n                    type: 'NEXT',\n                    inputName: 'username',\n                    inputValue: result.collection.items[0].username,\n                    current: 'password',\n                });\n            } else {\n                // Username or email not found; Offer registration\n                dispatchState({ type: 'REGISTER' });\n                dispatchState({ type: 'ERROR', error: { message: 'We don\\'t have anyone registered by that name. Would you like to register?' } });\n            }\n        } else if (state.current === 'password') {\n            const payload = {\n                ...state.user,\n                password: input,\n            };\n\n            const response = await fetch(API_ENDPOINT, {\n                method: 'POST',\n                mode: 'same-origin',\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(payload),\n            });\n            if (response.ok) {\n                dispatchState({ type: 'LOGIN_SUCCESS' });\n            } else {\n                const result = await response.json();\n                console.log(response, result);\n                dispatchState({ type: 'ERROR', error: result.collection.errors[0] });\n            }\n        } else {\n            dispatchState({ type: 'ERROR', error: 'An unknown error occurred.' });\n        }\n    };\n\n    let message;\n    if (state.isError) {\n        message = <div className=\"error\">{state.error.hasOwnProperty('message') ? state.error.message : 'An error occurred'}</div>;\n    } else if (state.mode === 'login') {\n        if (state.current === 'username') message = \"Erm... What's your name again?\";\n        else if (state.current === 'password') message = `That's right! I remember now! Your name is ${state.user.username}!`;\n    } else if (state.mode === 'register') {\n        // message = 'Register here';\n    }\n\n    const LoginForm = () => {\n        if (state.current === 'username') {\n            return <UnderlinedInput name=\"username\" placeholder=\"Username or Email\" padding={19} autofocus />;\n        }\n\n        return <UnderlinedInput type=\"password\" name=\"password\" placeholder=\"Password\" padding={19} autofocus />;\n    };\n\n    const RegisterForm = () => (\n        <>\n            <UnderlinedInput name=\"username\" value={state.user.username} placeholder=\"Username\" padding={19} autofocus />\n            <UnderlinedInput name=\"email\" value={state.user.email} placeholder=\"Email\" padding={19} />\n            <UnderlinedInput type=\"password\" name=\"password\" placeholder=\"Password\" padding={19} />\n        </>\n    );\n\n    return (\n        <>\n            <LoginButton handleClick={toggleOpen} />\n            <Modal open={state.isOpen} close={toggleOpen}>\n                <form id=\"loginform\" ref={form} onSubmit={handleSubmit} className={state.isLoading ? 'loading' : undefined}>\n                    <div id=\"loginform-nav\">\n                        <NavMenu>\n                            <NavMenu.Item selected><a href=\"#login\" onClick={resetForm}>New Name</a></NavMenu.Item>\n                            <NavMenu.Item><a href=\"#blue\" onClick={resetForm}>Blue</a></NavMenu.Item>\n                            <NavMenu.Item><a href=\"#gary\" onClick={resetForm}>Gary</a></NavMenu.Item>\n                            <NavMenu.Item><a href=\"#john\" onClick={resetForm}>John</a></NavMenu.Item>\n                        </NavMenu>\n                    </div>\n                    <div id=\"loginform-rival\" />\n                    <div id=\"loginform-message\">\n                        {message}\n                    </div>\n                    <div id=\"loginform-input\">\n                        {state.mode === 'login' ? <LoginForm /> : <RegisterForm />}\n                    </div>\n                    <div id=\"loginform-submit\">\n                        {state.isLoading ? (\n                            <>\n                                <span>Oak is thinking</span>\n                            </>\n                        ) : (\n                            <>\n                                {state.mode === 'login'\n                                    ? <Button onClick={() => dispatchState({ type: 'REGISTER' })}>Register</Button>\n                                    : <Button onClick={resetForm}>Login</Button>}\n                                <Button variant=\"contained\" type=\"submit\">Submit</Button>\n                            </>\n                        )}\n                    </div>\n                </form>\n            </Modal>\n        </>\n    );\n}\n"],"sourceRoot":""}