{"version":3,"sources":["webpack:///./browser/src/components/ui/Dropdown.jsx","webpack:///./browser/src/hooks/use-outside-click.js","webpack:///./browser/src/components/User.jsx","webpack:///./browser/src/components/layout/TopNavUser.jsx"],"names":["isDropdownToggle","matchComponent","DropdownToggle","DropdownMenu","Dropdown","classes","children","props","open","setOpen","React","useState","handleToggle","ref","callback","useRef","handleClickOutside","event","current","contains","target","console","log","useEffect","document","addEventListener","removeEventListener","useOutsideClick","className","cn","dropdown","Children","map","child","isValidElement","cloneElement","handleClick","type","onClick","aria-haspopup","aria-expanded","light","role","Toggle","Menu","Item","User","tag","username","avatar","href","undefined","tagChild","createElement","TopNavUser","id"],"mappings":"kYAKA,MAAMA,EAAmBC,YAAeC,GACjBD,YAAeE,GAEtC,SAASC,GAAS,QAAEC,EAAF,SAAWC,KAAaC,IACtC,MAAOC,EAAMC,GAAWC,IAAMC,UAAS,GACjCC,EAAe,IAAMH,GAASD,GAG9BK,ECJK,SAAyBC,GACpC,MAAMD,EAAMH,IAAMK,SAElB,SAASC,EAAmBC,GAAO,SAE3B,UAACJ,EAAIK,eAAL,iBAAC,EAAaC,gBAAd,aAAC,SAAwBF,EAAMG,WAC/BC,QAAQC,IAAI,yBAA0BR,GACtCA,EAASG,IAejB,OAXAP,IAAMa,UAAU,KAEZC,SAASC,iBAAiB,QAAST,GACnCK,QAAQC,IAAI,kCACL,WAEHE,SAASE,oBAAoB,QAASV,GACtCK,QAAQC,IAAI,kCAEjB,CAACT,IAEGA,EDlBKc,CAFQ,IAAMlB,GAAQ,IAI5BmB,EAAYC,IAAG,IACdxB,EACHyB,UAAU,EACVtB,SAGJ,OACI,2BAAKK,IAAKA,EAAKe,UAAWA,GAAerB,GAEpCG,IAAMqB,SAASC,IAAI1B,EAAW2B,GACtBvB,IAAMwB,eAAeD,IAKtBjC,EAAiBiC,GACVvB,IAAMyB,aAAaF,EAAO,CAC7BG,YAAaxB,IANVqB,IAgB3B,SAAS/B,GAAe,QAAEG,EAAF,SAAWC,EAAX,YAAqB8B,IACzC,MAAMR,EAAYC,IAAG,IACdxB,EACH,mBAAmB,IAGvB,OACI,4BAAQgC,KAAK,SAAST,UAAWA,EAAWU,QAASF,EAAaG,gBAAc,OAAOC,gBAAc,QAChGlC,GAKb,SAASH,GAAa,QAAEE,EAAF,SAAWC,IAC7B,MAAMsB,EAAYC,IAAG,IACdxB,EACH,iBAAiB,EACjBoC,OAAO,IAGX,OACI,yBAAKb,UAAWA,EAAWc,KAAK,QAC3BpC,GAWbF,EAASuC,OAASzC,EAClBE,EAASwC,KAAOzC,EAChBC,EAASyC,KART,UAAsB,SAAEvC,IACpB,OACI,yBAAKsB,UAAU,gBAAgBc,KAAK,YAAYpC,IAQzCF,QE7EA,SAAS0C,EAAKvC,GACzB,IAMIwC,GANA,SAAEC,EAAF,OAAYC,EAAZ,KAAoBC,GAAS3C,OAEpB4C,IAATD,IACAA,EAAQ,IAAGF,GAIf,MAAMI,EAAW,0BAAMxB,UAAU,iBAAiBoB,GAOlD,OALID,EADAG,EACMxC,IAAM2C,cAAc,IAAK,CAAEH,OAAMtB,UAAW,aAAewB,GAE3D1C,IAAM2C,cAAc,OAAQ,CAAEzB,UAAW,aAAewB,GAI9D,0BAAMxB,UAAU,QACXmB,GCbE,SAASO,GAAW,SAAEN,IACjC,OACI,kBAAC,EAAD,CAAUO,GAAG,uBACT,kBAAC,EAASZ,OAAV,CAAiBtC,QAAS,CAAE,iBAAiB,IACzC,kBAACyC,EAAD,CAAME,SAAUA,EAAUE,KAAK,GAAGD,OAAO,MAE7C,kBAAC,EAASL,KAAV,KACI,kBAAC,EAASC,KAAV,KAAe,uBAAGK,KAAO,KAAIF,GAAd,YACf,kBAAC,EAASH,KAAV,KAAe,uBAAGK,KAAO,KAAIF,WAAd,UACf,kBAAC,EAASH,KAAV,KAAe,uBAAGK,KAAK,wBAAR,cAX/B7B,QAAQC,IAAI","file":"TopNavUser_bundle.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport matchComponent from '../../lib/match-component.js';\nimport useOutsideClick from '../../hooks/use-outside-click.js';\n\nconst isDropdownToggle = matchComponent(DropdownToggle);\nconst isDropdownMenu = matchComponent(DropdownMenu);\n\nfunction Dropdown({ classes, children, ...props }) {\n    const [open, setOpen] = React.useState(false);\n    const handleToggle = () => setOpen(!open);\n    const handleClose = () => setOpen(false);\n\n    const ref = useOutsideClick(handleClose);\n\n    const className = cn({\n        ...classes,\n        dropdown: true,\n        open,\n    });\n\n    return (\n        <div ref={ref} className={className} {...props}>\n            {/* Map children & inject listeners */}\n            {React.Children.map(children, (child) => {\n                if (!React.isValidElement(child)) {\n                    return child;\n                }\n\n                // Button toggle dropdown menu\n                if (isDropdownToggle(child)) {\n                    return React.cloneElement(child, {\n                        handleClick: handleToggle,\n                    });\n                }\n\n                return child;\n            })}\n        </div>\n    );\n}\n\nfunction DropdownToggle({ classes, children, handleClick }) {\n    const className = cn({\n        ...classes,\n        'dropdown-toggle': true,\n    });\n\n    return (\n        <button type=\"button\" className={className} onClick={handleClick} aria-haspopup=\"true\" aria-expanded=\"true\">\n            {children}\n        </button>\n    );\n}\n\nfunction DropdownMenu({ classes, children }) {\n    const className = cn({\n        ...classes,\n        'dropdown-menu': true,\n        light: true,\n    });\n\n    return (\n        <div className={className} role=\"menu\">\n            {children}\n        </div>\n    );\n}\n\nfunction DropdownItem({ children }) {\n    return (\n        <div className=\"dropdown-item\" role=\"menuitem\">{children}</div>\n    );\n}\n\nDropdown.Toggle = DropdownToggle;\nDropdown.Menu = DropdownMenu;\nDropdown.Item = DropdownItem;\n\nexport default Dropdown;\n","import React from 'react';\n\n/**\n * Hook that listens for clicks outside of a reference.\n *\n * @param {Function} callback Function to execute on successful outside click\n *\n * @returns {Reference} Reference to \"inside\" element\n */\nexport default function useOutsideClick(callback) {\n    const ref = React.useRef();\n\n    function handleClickOutside(event) {\n        // If the click is registered outside the given ref, trigger cb\n        if (!ref.current?.contains?.(event.target)) {\n            console.log('Outside click detected', callback);\n            callback(event);\n        }\n    }\n\n    React.useEffect(() => {\n        // Bind the event listener\n        document.addEventListener('click', handleClickOutside);\n        console.log('Listening for outside click...');\n        return function cleanup() {\n            // Clean up before calling the effect again on the next render\n            document.removeEventListener('click', handleClickOutside);\n            console.log('Remove outside click handler');\n        };\n    }, [ref]);\n\n    return ref;\n}\n\nfunction useOutsideClick_OLD(ref, callback = () => {}) {\n    function handleClickOutside(event) {\n        // If the click is registered outside the given ref, trigger cb\n        if (!ref.current?.contains?.(event.target)) {\n            console.log('Outside click detected', callback);\n            callback(event);\n        }\n    }\n\n    React.useEffect(() => {\n        // Bind the event listener\n        document.addEventListener('click', handleClickOutside);\n        console.log('Listening for outside click...');\n        return () => {\n            // Clean up before calling the effect again on the next render\n            document.removeEventListener('click', handleClickOutside);\n            console.log('Remove outside click handler');\n        };\n    }, [callback]);\n}\n","import React from 'react';\n\nexport default function User(props) {\n    let { username, avatar, href } = props;\n\n    if (href === undefined) {\n        href = `~${username}`;\n    }\n\n    let tag;\n    const tagChild = <span className=\"user-username\">{username}</span>;\n    if (href) {\n        tag = React.createElement('a', { href, className: 'user-link' }, tagChild);\n    } else {\n        tag = React.createElement('span', { className: 'user-link' }, tagChild);\n    }\n\n    return (\n        <span className=\"user\">\n            {tag}\n        </span>\n    );\n}\n","import React from 'react';\nimport Dropdown from '../ui/Dropdown.jsx';\nimport User from '../User.jsx';\n\nconsole.log('<TopNavUser> has been lazy loaded!');\n\nexport default function TopNavUser({ username }) {\n    return (\n        <Dropdown id=\"login-user-dropdown\">\n            <Dropdown.Toggle classes={{ 'button-header': true }}>\n                <User username={username} href=\"\" avatar=\"\" />\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n                <Dropdown.Item><a href={`/~${username}`}>Profile</a></Dropdown.Item>\n                <Dropdown.Item><a href={`/~${username}/games`}>Games</a></Dropdown.Item>\n                <Dropdown.Item><a href=\"/login.php?do=logout\">Log out</a></Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n"],"sourceRoot":""}